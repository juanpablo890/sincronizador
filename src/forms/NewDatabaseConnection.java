package forms;


import controller.ConfigurationFile;
import controller.ConnectionDB;
import dao.DatabaseConfigurationDAO;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import pojos.DatabaseConfiguration;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Juan Pablo
 */
public class NewDatabaseConnection extends javax.swing.JFrame {

    /**
     * Creates new form Configuration
     *
     * @param conn
     */
    private Connection conn; 
   
    private boolean cancelOption;
    SwingWorker worker = null;
    Connection connection_sqlserver;
    NewDatabaseConnection aThis = this;
    public NewDatabaseConnection() throws SQLException { //leer campos de la BD en lugar de archivo properties.
        initComponents(); 
        ConnectionDB connectionDB = new ConnectionDB();
        connection_sqlserver = connectionDB.DBConnection("sqlserver", "192.168.1.206", "1433", "DBINTERMEDIA", "user_motor", "Mot0r.Tis4");
        HashMap properties = null;
        UIManager.put("nimbusOrange", new Color(38, 139, 210));
        setPort();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dbname = new javax.swing.JTextField();
        username = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        servername = new javax.swing.JTextField();
        save_btn = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        ckeck_connection = new javax.swing.JCheckBox();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        frecuency = new javax.swing.JTextField();
        records_amount = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        alias = new javax.swing.JTextField();
        sgbd = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nueva conexión a base de datos");
        setAlwaysOnTop(true);
        setResizable(false);

        save_btn.setText("Guardar");
        save_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_btnActionPerformed(evt);
            }
        });

        cancel.setText("Cancelar");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jLabel1.setText("base de datos:");

        jLabel2.setText("nombre de usuario:");

        jLabel3.setText("contraseña:");

        jLabel4.setText("servidor:");

        jLabel5.setText("puerto:");

        jLabel6.setText("alias:");

        ckeck_connection.setSelected(true);
        ckeck_connection.setText("probar conexión");

        jProgressBar1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel7.setText("frecuencia de sincronización (segs)");

        jLabel8.setText("cantidad de registros");

        jLabel9.setText("SGBD:");

        sgbd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "sqlserver", "postgresql" }));
        sgbd.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sgbdItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(ckeck_connection))
                                        .addComponent(dbname)
                                        .addComponent(username)
                                        .addComponent(password)
                                        .addComponent(servername, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(alias, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sgbd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(records_amount, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                    .addComponent(frecuency)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(88, 88, 88)
                                        .addComponent(save_btn)
                                        .addGap(34, 34, 34)
                                        .addComponent(cancel)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(27, 27, 27))
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9)
                    .addComponent(alias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sgbd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(servername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(ckeck_connection))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(frecuency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(records_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save_btn)
                    .addComponent(cancel))
                .addGap(24, 24, 24))
        );

        getAccessibleContext().setAccessibleName("seleccionar base de datos por defecto...");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void save_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_btnActionPerformed

        worker = new SwingWorker() {
            @Override
            protected Object doInBackground() throws InterruptedException {
                DatabaseConfigurationDAO dbcDAO = new DatabaseConfigurationDAO();
                            DatabaseConfiguration dbc;
            
                System.out.println("clic");
                if (ckeck_connection.isSelected()) {

                    System.out.println("testing connection...");
                    jProgressBar1.setValue(0);
                    jProgressBar1.setIndeterminate(true);
                    ConnectionDB connectionDB = new ConnectionDB();
                    Connection DBConnection;

                    cancel.setEnabled(false);
//jProgressBar1.setValue(this.getProgress());
                    try {
                        //obtener los datos de conexión de los campos del formulario para probar la conexión
                        DBConnection = connectionDB.DBConnection(String.valueOf(sgbd.getSelectedItem()), servername.getText(), port.getText(), dbname.getText(), username.getText(), String.valueOf(password.getPassword()));
                        jProgressBar1.setIndeterminate(false);
                        jProgressBar1.setValue(100);
                        if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea guardar los cambios?") == JOptionPane.OK_OPTION) {
                            
                            dbc = new DatabaseConfiguration(alias.getText(), dbname.getText(), username.getText(), String.valueOf(password.getPassword()), servername.getText(), Integer.parseInt(port.getText()), Integer.parseInt(frecuency.getText()), Integer.parseInt(records_amount.getText()), String.valueOf(sgbd.getSelectedItem()));
                            PreparedStatement prepareStatement = connection_sqlserver.prepareStatement(dbcDAO.getSQL_INSERT());
                            
                            dbcDAO.insert(dbc, prepareStatement);
                            //new ConfigurationFile().createConfigurationFile(alias.getText(), dbname.getText(), username.getText(), password.getPassword(), servername.getText(), Integer.parseInt(port.getText()), Integer.parseInt(frecuency.getText()), Integer.parseInt(records_amount.getText()), String.valueOf(sgbd.getSelectedItem()));
                            JOptionPane.showMessageDialog(rootPane, "configuración guardada exitosamente!");
                            DBConnection.close();
                            aThis.dispose();
//                    owner.dispose();
                        }

                    } catch (SQLException ex) {
                        jProgressBar1.setIndeterminate(false);
                        jProgressBar1.setValue(100);
                        JOptionPane.showMessageDialog(rootPane, "error de conexión a la base de datos", "ERROR", JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(Configuration.class.getName()).log(Level.SEVERE, null, ex);
                    } /*catch (IOException ex) {
                        JOptionPane.showMessageDialog(rootPane, "error al crear archivo de configuración", "ERROR", JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(Configuration.class.getName()).log(Level.SEVERE, null, ex);

                    }*/
                } else {
                    if (JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que desea guardar los cambios?") == JOptionPane.OK_OPTION) {
                        dbc = new DatabaseConfiguration(alias.getText(), dbname.getText(), username.getText(), String.valueOf(password.getPassword()), servername.getText(), Integer.parseInt(port.getText()), Integer.parseInt(frecuency.getText()), Integer.parseInt(records_amount.getText()), String.valueOf(sgbd.getSelectedItem()));
                        PreparedStatement prepareStatement = null;
                        try {
                            prepareStatement = connection_sqlserver.prepareStatement(dbcDAO.getSQL_INSERT());
                        } catch (SQLException ex) {
                            Logger.getLogger(NewDatabaseConnection.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        try {
                            dbcDAO.insert(dbc, prepareStatement);
                        } catch (SQLException ex) {
                            Logger.getLogger(NewDatabaseConnection.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        //new ConfigurationFile().createConfigurationFile(alias.getText(), dbname.getText(), username.getText(), password.getPassword(), servername.getText(), Integer.parseInt(port.getText()), Integer.parseInt(frecuency.getText()), Integer.parseInt(records_amount.getText()), String.valueOf(sgbd.getSelectedItem()));
                        JOptionPane.showMessageDialog(rootPane, "configuración guardada exitosamente!");
                        aThis.dispose();
                        JOptionPane.showMessageDialog(rootPane, "configuración guardada exitosamente!");
                    }
                }
                return null;
            }

            @Override
            protected void done() {
                jProgressBar1.setIndeterminate(false);
                jProgressBar1.setValue(100);
                cancel.setEnabled(true);
                System.out.println("terminó hilo de ejecución");
            }

        };
        worker.execute();


    }//GEN-LAST:event_save_btnActionPerformed


    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        System.out.println("cancelar proceso...");
//        worker.stop();
//        System.out.println(worker.getState());
        this.dispose();


    }//GEN-LAST:event_cancelActionPerformed

    private void sgbdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sgbdItemStateChanged
        setPort();
    }//GEN-LAST:event_sgbdItemStateChanged

    private void setPort(){
        if(sgbd.getSelectedItem().equals("postgresql")){
            port.setText("5432");
        }
        else{
            port.setText("1433");
        }
    }
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new DatabaseConnection().setVisible(true);
//                
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alias;
    private javax.swing.JButton cancel;
    private javax.swing.JCheckBox ckeck_connection;
    private javax.swing.JTextField dbname;
    private javax.swing.JTextField frecuency;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField port;
    private javax.swing.JTextField records_amount;
    private javax.swing.JButton save_btn;
    private javax.swing.JTextField servername;
    private javax.swing.JComboBox<String> sgbd;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
