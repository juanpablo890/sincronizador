package forms;

import controller.ConnectionDB;
import controller.ConsultasSQL;
import controller.DebitoFilesController;
import controller.DescargasAVLController;
import controller.DescargasAVLFaltantesController;
import controller.StoredProcedure;
import dao.OPERechargeDAO;
import dao.OPETransactionDAO;
import java.awt.Color;
//import controller.Logger;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.TimeZone;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
//import javax.swing.Timer;
import java.util.Timer;
import javax.swing.UIManager;
import pojos.OPERecharge;
import pojos.OPETransaction;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author n6y
 */
public class MotorTISA extends javax.swing.JFrame {

    public static Logger getLogger() {
        return logger;
    }

    public static void setSetEnabledDownloadButton(boolean aSetEnabledDownloadButton) {
        setEnabledDownloadButton = aSetEnabledDownloadButton;
    }

    /**
     * Creates new form MotorTISA
     */
    private Connection DBConnection;
    private ConnectionDB connectionDB;
    private static final Logger logger = Logger.getLogger(MotorTISA.class.getName());
    private static boolean setEnabledDownloadButton = false;
    private static SwingWorker registros_faltantes_AVL;

    public MotorTISA() throws IOException {
        System.out.println(TimeZone.getTimeZone("GMT+5:00").getDisplayName());
        Calendar instance = GregorianCalendar.getInstance();
        System.out.println(LocalDate.now());
        LocalDate now = LocalDate.now();
        String logFileName = "motor_tisa_" + now.format(DateTimeFormatter.ofPattern("dd-MM-yyyy")) + ".log";
        System.out.println(instance.get(Calendar.DAY_OF_MONTH) + "-" + instance.get(Calendar.MONTH) + "-" + instance.get(Calendar.YEAR));
        initComponents();
        UIManager.put("nimbusOrange", new Color(38, 139, 210));

        System.out.println("archivo log existe: " + new File(logFileName).exists());

        FileHandler fh = new FileHandler(logFileName, true);
        fh.setFormatter(new SimpleFormatter());
        logger.addHandler(fh);
        logger.setLevel(Level.FINE);
        checkConnection();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        downloadBtn = new javax.swing.JButton();
        pb_downloadAVL = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        pb_downloadSFINX = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        pb_debitosFIMPE = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Motor AVL TISA");
        setBackground(new java.awt.Color(102, 204, 255));
        setResizable(false);

        downloadBtn.setText("Descargar");
        downloadBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downloadBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        downloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtnActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lightoffred.png"))); // NOI18N

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jMenu3.setText("Configuración");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/config_icon.png"))); // NOI18N
        jMenuItem1.setText("Conexión de BD por defecto");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem3.setText("Nueva conexión de base de datos...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);
        jMenu3.add(jSeparator1);

        jMenuBar2.add(jMenu3);

        jMenu1.setText("Herramientas");

        jMenuItem2.setText("Ver archivo log...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar2.add(jMenu1);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pb_downloadSFINX, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(downloadBtn)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pb_downloadAVL, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(pb_debitosFIMPE, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(downloadBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jButton1)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pb_downloadSFINX, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pb_downloadAVL, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pb_debitosFIMPE, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void downloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtnActionPerformed

        SwingWorker worker_postgres = new SwingWorker() {
            OPETransactionDAO opetDAO = new OPETransactionDAO();
            OPERechargeDAO operDAO = new OPERechargeDAO();

            long InitialTime;
            long FinalTime;

            @Override
            protected Object doInBackground() {
                try {
                    InitialTime = System.currentTimeMillis();

//                    Connection DBConnection = new ConnectionDB().DBConnection("postgresql", "192.168.1.105", "5432", "db_intermedia", "bdtisauser","TISA*2022");
                    Connection DBConnection = new ConnectionDB().DBConnection("postgresql", "localhost", "5432", "sfinx_bckp", "postgres", "juanpablo712");
                    Connection connMSSQL = new ConnectionDB().DBConnection();
                    ConsultasSQL consultasSQL = new ConsultasSQL(connMSSQL);
                    ArrayList<PreparedStatement> prepareStatementList = new ArrayList();
                    int regCount = consultasSQL.getSFINXRegCount();

//                    StoredProcedure sp_sfinx_selects = consultasSQL.executeSP(DBConnection, consultasSQL.getSQLSP_SFINX_SELECTS());
                    Statement createStatement = DBConnection.createStatement();
//                    createStatement.execute("SELECT * from f_carga_sfinx_to_intermedia_selects(500000)");
                    createStatement.execute("SELECT * FROM ope_transaction  order by created_at desc limit 10000");
                    PreparedStatement prepareStatement = connMSSQL.prepareStatement(opetDAO.getSQL_INSERT());
                    ResultSet rs = createStatement.getResultSet();

                    int i = 1;
                    pb_downloadSFINX.setMaximum(10000);
                    pb_downloadSFINX.setStringPainted(true);
                    while (rs.next()) {
                        OPETransaction t = new OPETransaction(rs);

                        opetDAO.insert(t, connMSSQL, prepareStatement);

                        jLabel2.setText("Descargando " + i + "/15000");
                        pb_downloadSFINX.setValue(i);
                        i++;

                    }
                    //proceso de descarga ope_recharge (sfinx)
//                    do {
//                        pb_downloadSFINX.setIndeterminate(false);
//                        //rs = prepareCall_sfinx_selects.getResultSet();
//                        rs = sp_sfinx_selects.getResultset();
//                        prepareStatement = DBConnection.prepareStatement(operDAO.getSQL_INSERT());
//                        System.out.println("query time " + prepareStatement.getQueryTimeout());
////                        System.out.println("rs: " + rsCont);
//                        while (rs.next()) {
//
//                            //System.out.println(rs.getLong(1));
//                            OpeRecharge r = new OpeRecharge(rs);
//
//                            operDAO.insert(r, DBConnection, prepareStatement);
//                            pb_downloadSFINX.setValue(i);
//                            jLabel2.setText("descargando registro: " + i + "/" + regCount);
//
//                            i++;
//
//                        }
//                        //prepareStatement.executeBatch();
//                        prepareStatementList.add(prepareStatement);
//
////                        rsCont++;
//                    } //while (prepareCall_sfinx_selects.getMoreResults());
//                    while (sp_sfinx_selects.getPrepareCall().getMoreResults());
                    prepareStatement.executeBatch();
                } catch (SQLException ex) {
                    Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;
            }

            @Override
            protected void done() {

                FinalTime = System.currentTimeMillis();
                long processTimeMins = getProcessTimeMins(InitialTime, FinalTime);
                long processTimeSegs = getProcessTimeSegs(InitialTime, FinalTime);

                System.out.println("process time " + processTimeMins + " mins");
                jLabel2.setText("proceso completado" + " (" + processTimeSegs + " segs)");
                System.out.println("fin proceso...");
                //downloadBtn.setEnabled(true);
            }
        };

        //worker_postgres.execute();
        final SwingWorker worker_sfinx = new SwingWorker() {
            ResultSet rs;
            int rsCont = 1;
            int i = 1;
            long InitialTime;
            long FinalTime;

            @Override
            protected Object doInBackground() throws InterruptedException {
                InitialTime = System.currentTimeMillis();
                try {
                    Connection DBConnection = new ConnectionDB().DBConnection();

                    ConsultasSQL consultasSQL = new ConsultasSQL(DBConnection);
                    System.out.println("clic");
                    downloadBtn.setEnabled(false);
                    pb_downloadSFINX.setMaximum(100);
                    pb_downloadSFINX.setValue(0);
                    pb_downloadSFINX.setIndeterminate(true);
                    jLabel2.setText("iniciando descarga SFINX/FIMPE...");

                    //int cantReg = Integer.parseInt(connectionDB.getRecordsCount().toString());
                    //System.out.println("cantidad de registros: " + cantReg);
                    downloadBtn.setEnabled(false);

                    System.out.println(System.currentTimeMillis());
                    //CallableStatement prepareCall = DBConnection.prepareCall("exec [motor].sp_prueba");
                    //CallableStatement prepareCall = DBConnection.prepareCall("select 'ope_recharge' as table_name" +" select * from [sfinx].[ope_transaction]"+ " select 'ope_transaction' as table_name"+ " select * FROM [motor].[config_motor_tisa]");

//                    CallableStatement prepareCall_insert = DBConnection.prepareCall(consultasSQL.getSQLSP_SFINXFIMPE());
//
//                    CallableStatement prepareCall = DBConnection.prepareCall(consultasSQL.getSQLSP_SFINXFIMPE_SELECTS());
//                    CallableStatement prepareCall_sfinx_insert = DBConnection.prepareCall(consultasSQL.getSQLSP_SFINX());
//                    CallableStatement prepareCall_sfinx_selects = DBConnection.prepareCall(consultasSQL.getSQLSP_SFINX_SELECTS());
                    StoredProcedure sp_sfinxfimpe = consultasSQL.executeSP(consultasSQL.getSQLSP_SFINXFIMPE());
                    StoredProcedure sp_sfinxfimpe_selects = consultasSQL.executeSP(consultasSQL.getSQLSP_SFINXFIMPE_SELECTS());
                    StoredProcedure sp_sfinx = consultasSQL.executeSP(consultasSQL.getSQLSP_SFINX());
                    StoredProcedure sp_sfinx_selects = consultasSQL.executeSP(consultasSQL.getSQLSP_SFINX_SELECTS());

                    long currentTimeMillis = System.currentTimeMillis();
                    //prepareCall_insert.execute();
                    long currentTimeMillis1 = System.currentTimeMillis();
                    System.out.println("tiempo de ejecucion: " + getProcessTimeSegs(currentTimeMillis, currentTimeMillis1));
                    System.out.println("ejecutando query...");
//                    prepareCall.execute();
//                    prepareCall_sfinx_insert.execute();
//                    prepareCall_sfinx_selects.execute();
                    int regCount = consultasSQL.getSFINXRegCount();

                    PreparedStatement prepareStatement = null;
                    ArrayList<PreparedStatement> prepareStatementList = new ArrayList();
                    pb_downloadSFINX.setMaximum(regCount);
                    pb_downloadSFINX.setStringPainted(true);
                    OPETransactionDAO opetDAO = new OPETransactionDAO();
                    OPERechargeDAO operDAO = new OPERechargeDAO();

                    //proceso de descarga ope_recharge (sfinx)
                    do {
                        pb_downloadSFINX.setIndeterminate(false);
                        //rs = prepareCall_sfinx_selects.getResultSet();
                        rs = sp_sfinx_selects.getResultset();
                        prepareStatement = DBConnection.prepareStatement(operDAO.getSQL_INSERT());
                        System.out.println("query time " + prepareStatement.getQueryTimeout());
                        System.out.println("rs: " + rsCont);
                        while (rs.next()) {

                            //System.out.println(rs.getLong(1));
                            OPERecharge r = new OPERecharge(rs);

                            operDAO.insert(r, DBConnection, prepareStatement);
                            pb_downloadSFINX.setValue(i);
                            jLabel2.setText("descargando registro: " + i + "/" + regCount);

                            i++;

                        }
                        //prepareStatement.executeBatch();
                        prepareStatementList.add(prepareStatement);

                        rsCont++;
                    } //while (prepareCall_sfinx_selects.getMoreResults());
                    while (sp_sfinx_selects.getPrepareCall().getMoreResults());
                    //jLabel2.setText("iniciando descarga OPE_TRANSACTION (FIMPE)...");
                    do {
                        pb_downloadSFINX.setIndeterminate(false);
//                        rs = prepareCall.getResultSet();
                        rs = sp_sfinxfimpe_selects.getResultset();
                        prepareStatement = DBConnection.prepareStatement(opetDAO.getSQL_INSERT());
                        System.out.println("rs: " + rsCont);
                        while (rs.next()) {

                            //System.out.println(rs.getLong(1));
                            OPETransaction t = new OPETransaction(rs);

                            opetDAO.insert(t, DBConnection, prepareStatement);
                            pb_downloadSFINX.setValue(i);
                            jLabel2.setText("descargando registro: " + i + "/" + regCount);

                            i++;
                        }
                        //prepareStatement.executeBatch();
                        prepareStatementList.add(prepareStatement);

                        rsCont++;
                    } while (sp_sfinx_selects.getPrepareCall().getMoreResults());

                    //itera sobre el ArrayList de objetos Batch con todos los registros de una tabla para insertarlos en la BD
//                    pb_downloadSFINX.setMaximum(prepareStatementList.size());
//                    int j = 1;
//                    jLabel2.setText("insertando registros...");
                    for (PreparedStatement preparedStatementB : prepareStatementList) {
                        preparedStatementB.executeBatch(); //ejecuta el Batch para una tabla
                        System.out.println(preparedStatementB.getFetchSize());
                        //pb_downloadSFINX.setValue(j++);
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(rootPane, "El archivo de configuración de BD por defecto no existe!\nVaya al menú Configuración > seleccionar base de datos por defecto para corregir el problema.", "archivo de configuración no encontrado", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;

            }

            @Override
            protected void done() {

                FinalTime = System.currentTimeMillis();
                long processTimeMins = getProcessTimeMins(InitialTime, FinalTime);
                long processTimeSegs = getProcessTimeSegs(InitialTime, FinalTime);

                System.out.println("process time " + processTimeMins + " mins");
                jLabel2.setText("proceso completado" + " (" + processTimeSegs + " segs)");
                System.out.println("fin proceso...");
                //downloadBtn.setEnabled(true);
            }
        };
        //worker_sfinx.execute();
        final SwingWorker worker = new SwingWorker() {
            ResultSet rs;
            int rsCont = 1;
            int i = 1;
            long InitialTime;
            long FinalTime;
            ConsultasSQL consultasSQL;
            private boolean proceso_completado = true;
            private int regCount;

            @Override
            protected Object doInBackground() throws InterruptedException {
                InitialTime = System.currentTimeMillis();
                try {
                    ConnectionDB connectionDB = new ConnectionDB(); //Conexión a base de datos por defecto (archivo properties)
                    Connection DBConnection = connectionDB.DBConnection();
                    HashMap conexionData = connectionDB.getConexionData();
                    Object synchronization_frec = conexionData.get("synchronization_frec");
                    Connection connDBFIMPETISA = new ConnectionDB().DBConnection("sqlserver", "192.168.1.206", "1433", "DBFIMPETISA", "user_motor", "Mot0r.Tis4");
                    consultasSQL = new ConsultasSQL(DBConnection);
                    ConsultasSQL consultasSQLDBFIMPETISA = new ConsultasSQL(connDBFIMPETISA);

//                    System.out.println("clic");
                    Calendar programmed_datetime = Calendar.getInstance();
                    programmed_datetime.set(Calendar.HOUR_OF_DAY, 10);
                    programmed_datetime.set(Calendar.MINUTE, 14);
                    programmed_datetime.set(Calendar.SECOND, 0);
                    DescargasAVLController descargasAVLController = new DescargasAVLController(pb_downloadAVL, jLabel1, downloadBtn, DBConnection, connDBFIMPETISA, consultasSQL, consultasSQLDBFIMPETISA);
                    Timer t = new Timer();
                    System.out.println("synchronization_frec: "+synchronization_frec);
                    t.scheduleAtFixedRate(descargasAVLController, programmed_datetime.getTime(), Long.parseLong(synchronization_frec.toString()));
                    //descargasAVLController.download(pb_downloadAVL, jLabel1, downloadBtn, DBConnection, connDBFIMPETISA, consultasSQL, consultasSQLDBFIMPETISA);
                } catch (OutOfMemoryError ex) {
                    Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(rootPane, ex, "Espacio de memoria insuficiente", JOptionPane.ABORT);

                } catch (SQLException | IOException ex) {
                    System.out.println("error en proceso");
                    Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex);
                    try {
                        consultasSQL.insertarRangoUltimosIDs(DBConnection, false);
                    } catch (SQLException ex1) {
                        Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex1);
                    }

                }
                return null;
            }

            @Override
            protected void done() {
                FinalTime = System.currentTimeMillis();
                long processTimeMins = getProcessTimeMins(InitialTime, FinalTime);
                long processTimeSegs = getProcessTimeSegs(InitialTime, FinalTime);

                System.out.println("process time " + processTimeMins + " mins");
                jLabel1.setText("proceso completado" + " (" + processTimeSegs + " segs)");
                System.out.println("fin proceso...");
                //downloadBtn.setEnabled(true);
            }
        };
        worker.execute();

        SwingWorker procesarDBINTERMEDIA_DBFIMPETISA = new SwingWorker() {

            @Override
            protected Object doInBackground() throws InterruptedException {
                try {

                    DescargasAVLController avlController = new DescargasAVLController();
                    Connection connDBFIMPETISA = new ConnectionDB().DBConnection("sqlserver", "192.168.1.206", "1433", "DBFIMPETISA", "user_motor", "Mot0r.Tis4");
                    ConsultasSQL consultasSQLDBFIMPETISA = new ConsultasSQL(connDBFIMPETISA);
                    StoredProcedure executeSP2 = consultasSQLDBFIMPETISA.executeSP(consultasSQLDBFIMPETISA.getSQLSP_DBINTERMEDIA_TO_DBFIMPETISA());
                    int avlRegCount = new ConsultasSQL(connDBFIMPETISA).getAVLRegCount(); //obtener cantidad de registros en DBINTERMEDIA contra DBFIMPETISA
                    //si la cantidad es menor, esperar...
                    if (avlRegCount < 10) {
                        Thread.sleep(100000);
                    }
                    System.out.println("Descargando DBINTERMEDIA A DBFIMPETISA...");
                    jLabel1.setText("Descargando DBINTERMEDIA A DBFIMPETISA...");
                    avlController.insertSIGOTODBSMOTOR(pb_downloadAVL, jLabel1, downloadBtn, connDBFIMPETISA, executeSP2, avlRegCount); //INSERTA desde DBINTERMEDIA A DBFIMPETISA
                } catch (SQLException ex) {
                    Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex);
                }
                return null;

            }
        };

//        SwingWorker crearTablasTmp = new SwingWorker() {
//            @Override
//            protected Object doInBackground() {
//                try {
//                    Connection connDBFIMPETISA = new ConnectionDB().DBConnection("sqlserver", "192.168.1.206", "1433", "DBFIMPETISA", "user_motor", "Mot0r.Tis4");
//
//                    ConsultasSQL consultasSQLDBFIMPETISA = new ConsultasSQL(connDBFIMPETISA);
//                    StoredProcedure executeSP = consultasSQLDBFIMPETISA.executeSP(consultasSQLDBFIMPETISA.getSQLSP_CREATE_DEBIT_TMP_TABLE());
//                    ResultSet resultset = executeSP.getResultset();
//                    resultset.next();
//                    String tableName = resultset.getString("tableName");
//                    System.out.println(tableName);
//                    FimpeDEBITODAO fd = new FimpeDEBITODAO(tableName);
//                    System.out.println(fd.getSQL_INSERT());
//                    StoredProcedure debitos = consultasSQLDBFIMPETISA.executeSP(consultasSQLDBFIMPETISA.getSQLSP_SELECT_DEBITOS());
//                    ResultSet rs = debitos.getResultset();
//                    PreparedStatement prepareStatement = connDBFIMPETISA.prepareStatement(fd.getSQL_INSERT());
//                    while (rs.next()) {
//                        System.out.println("insertando...");
//                        FimpeDEBITO fimpeDEBITO = new FimpeDEBITO(rs);
//                        fd.insert(fimpeDEBITO, connDBFIMPETISA, prepareStatement);
//                    }
//                    prepareStatement.executeBatch();
//
//                } catch (SQLException ex) {
//                    Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex);
//                }
//                return null;
//            }
//
//            @Override
//            protected void done() {
//
//                System.out.println("tabla creada");
//            }
//        };
//        //crearTablasTmp.execute();
        SwingWorker enableDownloadBtn = new SwingWorker() {
            @Override
            @SuppressWarnings("empty-statement")
            protected Object doInBackground() throws Exception {
                while (!(worker_sfinx.isDone() && worker.isDone()));

                return null;

            }

            @Override
            protected void done() {
                downloadBtn.setEnabled(true);
                System.out.println("fin proceso");
            }

        };
        //enableDownloadBtn.execute();

        registros_faltantes_AVL = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                DescargasAVLController avlController = new DescargasAVLController();
//                Connection DBConnection = new ConnectionDB().DBConnection(); //Conexción a base de datos por defecto (archivo properties)
                ConsultasSQL consultasSQL = new ConsultasSQL(DBConnection);
//                Statement createStatement = DBConnection.createStatement();
//                System.out.println("registros faltantes?");
//                ResultSet rs = createStatement.executeQuery(consultasSQL.getSQL_SELECT_COUNT_RANGOS_PROCESO_INCOMPLETO());
//                rs.next();
//                int cant_reg = rs.getInt("cant_reg");
//                System.out.println("cantidad de registros: "+cant_reg);
//                if(cant_reg > 0){
//                    ResultSet executeQuery = createStatement.executeQuery(consultasSQL.getSQL_SELECT_RANGOS_PROCESO_INCOMPLETO());
//                    createStatement = DBConnection.createStatement();
//                    while(executeQuery.next()){
//                        String id_rango = executeQuery.getString("id");
//                        String id_primero = executeQuery.getString("id_primero");
//                        String id_ultimo = executeQuery.getString("id_ultimo");
//                        System.out.println(id_primero+" "+id_ultimo);
//                        String parameterizedFor_SQLSP_AVLGPRS_FALTANTES2 = consultasSQL.getParameterizedFor_SQLSP_AVLGPRS_FALTANTES2(id_primero, id_ultimo);
//                        System.out.println(parameterizedFor_SQLSP_AVLGPRS_FALTANTES2);
//                        createStatement.execute(parameterizedFor_SQLSP_AVLGPRS_FALTANTES2);
//                        StoredProcedure executeSPFaltantesCounts = consultasSQL.executeSP(consultasSQL.getSQLFN_AVLGPRS_FALTANTES_COUNTS());
//                        ResultSet resultsetAVLFaltantesCounts = executeSPFaltantesCounts.getResultset();
//                        resultsetAVLFaltantesCounts.next();
//                        int countAVLFaltantes = resultsetAVLFaltantesCounts.getInt("total_count");
//                        System.out.println("countAVLFaltantes: "+countAVLFaltantes);
//                        avlController.procesarFaltantesAVL(pb_downloadAVL, jLabel1, downloadBtn, DBConnection, countAVLFaltantes);
//                        createStatement.execute(consultasSQL.getSQL_TRUNCATE_TABLE_AVL_IDS_FALTANTES());
//                        RangoAVL rangoAVL = avlController.obtenerRangoPorID(DBConnection, Long.parseLong(id_rango));
//                        rangoAVL.setReprocesado(true);
//                        avlController.actualizarEstatusReprocesado(DBConnection, rangoAVL);
//                    }
//                    
//                }
//                System.out.println("registros faltantes?");
                Statement createStatement = DBConnection.createStatement();
//                ResultSet rs = createStatement.executeQuery(consultasSQL.getSQL_SELECT_COUNT_RANGOS_PROCESO_INCOMPLETO());
//                rs.next();
//                int cant_reg = rs.getInt("cant_reg");
//                System.out.println("cantidad de registros: " + cant_reg);
//                if (cant_reg > 0) { //llamar hilo para ejecutar proceso: (schedule:TimerTask
//                    
//                    avlController.procesarFaltantesAVL(pb_downloadAVL, jLabel1, downloadBtn, DBConnection);
//                }
                Date current_date = Date.from(ZonedDateTime.now().toInstant());
                Timer timer = new Timer();
                timer.schedule(new DescargasAVLFaltantesController(DBConnection, consultasSQL, avlController, createStatement, pb_downloadAVL, jLabel1, downloadBtn), current_date, 100000); //ejecución cada 100 segundos

                return null;

            }

            @Override
            protected void done() {
                System.out.println("proceso completo");
            }
        };
        registros_faltantes_AVL.execute();

        Calendar programmed_datetime = Calendar.getInstance();
        programmed_datetime.set(Calendar.HOUR_OF_DAY, 15);
        programmed_datetime.set(Calendar.MINUTE, 23);
        programmed_datetime.set(Calendar.SECOND, 0);

        Timer timer = new Timer();
        Date current_date = Date.from(ZonedDateTime.now().toInstant());
        String current_date_format = new SimpleDateFormat("HH:mm:ss").format(current_date);
        String programmed_datetime_format = new SimpleDateFormat("HH:mm:ss").format(programmed_datetime.getTime());
        System.out.println("actual: " + current_date_format);
        System.out.println("calendar: " + programmed_datetime_format);
        System.out.println(current_date_format.compareTo(programmed_datetime_format));
//        //if (current_date_format.compareTo(programmed_datetime_format) < 0) {
        timer.schedule(new DebitoFilesController(pb_debitosFIMPE), programmed_datetime.getTime(), 86400000);
//        //}


    }//GEN-LAST:event_downloadBtnActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                new Configuration().setVisible(true);

            }
        });
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        //leer archivo log y enviar a JFrame
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new LogViewer().setVisible(true);
                } catch (IOException ex) {
                    getLogger().log(Level.SEVERE, null, ex);
                }
            }
        });
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new NewDatabaseConnection().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lightgreen.gif"))); // NOI18N
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lightred.gif"))); // NOI18N
    }//GEN-LAST:event_jButton2ActionPerformed

    private void checkConnection() throws IOException {
        System.out.println("conectar a BD...");

        System.out.println("logger: " + logger.getName());
        connectionDB = new ConnectionDB();
        //logger = Logger.getLogger(getClass().getName());
        try {

            DBConnection = connectionDB.DBConnection(); //conectar a BD por default (archivo properties)

            logger.fine("conexion realizada");
            downloadBtn.setEnabled(true);
        } catch (IOException ex) {

            JOptionPane.showMessageDialog(rootPane, "El archivo de configuración de BD por defecto no existe!", "archivo de configuración no encontrado", JOptionPane.ERROR_MESSAGE);
            logger.log(Level.SEVERE, "archivo properties inexistente", ex);

        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "error al conectar a la base de datos", ex);
            UIManager.put("OptionPane.minimumSize", new Dimension(100, 100));
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "error de configuración de conexión a base de datos", JOptionPane.ERROR_MESSAGE);

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MotorTISA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
//        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {

                    MotorTISA motorTISA = new MotorTISA();
                    motorTISA.setVisible(true);

                } catch (IOException ex) {
                    Logger.getLogger(MotorTISA.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
//        Thread thread = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                new Configuration().setVisible(true);
//            }
//        });
//        thread.start();

    }

    private long getProcessTimeSegs(long InitialTime, long FinalTime) {
        long processTime = FinalTime - InitialTime;
        return processTime / 1000;

    }

    private long getProcessTimeMins(long InitialTime, long FinalTime) {
        long processTime = FinalTime - InitialTime;
        return (processTime / 1000) / 60;
    }

    private void prueba() {
        try {
            System.out.println("ejecutando codigo");
        } catch (Exception ex) {
            System.out.println("excepcion atrapada");
        }
    }

    public static SwingWorker getRegistros_faltantes_AVL() {
        return registros_faltantes_AVL;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downloadBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JProgressBar pb_debitosFIMPE;
    private javax.swing.JProgressBar pb_downloadAVL;
    private javax.swing.JProgressBar pb_downloadSFINX;
    // End of variables declaration//GEN-END:variables

}
